<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2020 - 2024 Alexander Kapitman

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.github.akman</groupId>
  <artifactId>jpackage-maven-plugin-test</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>JPackage maven plugin unit tests</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>com.github.akman</groupId>
        <artifactId>jpackage-maven-plugin</artifactId>
        <version>0.1.0-SNAPSHOT</version>
        <configuration>
          <!--
            Specifies the JDK home path which provides the tool needed.
            If not specified the jpackage tool executable will be find in
            the following order:

              - user specified JDK home directory by toolchains-plugin
              - JDK home directory specified by system variable JAVA_HOME
              - system path specified by system variable PATH
          -->
          <toolhome>path/to/jpackage/home</toolhome>


          <!-- generic options -->


          <!--
            Specifies the location in which generated output files are placed.
            Default value: ${project.build.directory}/jpackage
          -->
          <dest>${project.build.directory}/jpackage</dest>
          <!--
            Specifies the location in which temporary files are placed.
            If specified, the directory will not be removed upon the task
            completion and must be removed manually.
          -->
          <temp>${project.build.directory}/jpackage/temp</temp>
          <!--
            Specifies the type of package to
            create: { PLATFORM | IMAGE | EXE | MSI }.
            Default value: PLATFORM (a platform dependent default type)
          -->
          <type>IMAGE</type>
          <!--
            Enable verbose tracing.
            Default value: false.
          -->
          <verbose>true</verbose>
          <!--
            Specifies version of the application and/or package.
          -->
          <appversion>1.0</appversion>
          <!--
            Specifies copyright for the application.
          -->
          <copyright>Copyright (C) 2020 Alexander Kapitman</copyright>
          <!--
            Specifies description of the application.
          -->
          <description>JPackage Maven Plugin Unit Tests</description>
          <!--
            Specifies the name of subdirectory relative to the destination
            directory in which files of generated application image are placed.
          -->
          <name>appimage</name>
          <!--
            Specifies vendor of the application.
          -->
          <vendor>Akman</vendor>


          <!-- options for creating the application image -->


          <!--
            Specifies the location of the icon of the application package.
          -->
          <icon>config/jpackage/icon.ico</icon>
          <!--
            Specifies the location of the input directory that contains
            the files to be packaged. All files in the input directory
            will be packaged into the application image.
          -->
          <input>${project.build.directory}/jlink/libs</input>


          <!-- options for creating the runtime image -->


          <!--
            Specifies the location of the predefined runtime
            image (result of jlink) that will be copied into
            the application image.
            If not specified, jpackage will run jlink to create
            the runtime image using options:
              - strip-debug
              - no-header-files
              - no-man-pages
              - strip-native-commands
          -->
          <runtimeimage>${project.build.directory}/jlink/image</runtimeimage>
          <!--
            Specifies the module path. The path where the jlink tool discovers
            observable modules: modular JAR files, JMOD files, exploded modules.
            If this option is not specified, then the default module path
            is $JAVA_HOME/jmods. This directory contains the java.base module
            and the other standard and JDK modules. If this option is specified
            but the java.base module cannot be resolved from it, then
            the jlink command appends $JAVA_HOME/jmods to the module path.
            Pass on &dash;-modulepath option to jlink.

            pathelements - passed to jlink as is
            filesets - sets of files (without directories)
            dirsets - sets of directories (without files)
            dependencysets - sets of dependencies with specified includes and
                             excludes patterns (glob: or regex:) for file names
                             and regex patterns only for module names, and
                             excludes for automatic modules
          -->
          <modulepath>
            <pathelements>
              <pathelement>mod.jar</pathelement>
              <pathelement>mod.jmod</pathelement>
              <pathelement>mods/exploded/mod</pathelement>
            </pathelements>
            <filesets>
              <fileset>
                <directory>${project.build.directory}</directory>
                <includes>
                  <include>**/*</include>
                </includes>
                <excludes>
                  <exclude>**/*Empty.jar</exclude>
                  <exclude>jlink.opts</exclude>
                  <exclude>jlink-opts</exclude>
                </excludes>
                <followSymlinks>false</followSymlinks>
              </fileset>
            </filesets>
            <dirsets>
              <dirset>
                <directory>target</directory>
                <includes>
                  <include>**/*</include>
                </includes>
                <excludes>
                  <exclude>**/*Test</exclude>
                </excludes>
                <followSymlinks>true</followSymlinks>
              </dirset>
            </dirsets>
            <dependencysets>
              <dependencyset>
                <includeoutput>false</includeoutput>
                <excludeautomatic>false</excludeautomatic>
                <includes>
                  <include>glob:**/*.jar</include>
                  <include>regex:foo-(bar|baz)-.*?\.jar</include>
                </includes>
                <includenames>
                  <includename>.*</includename>
                </includenames>
                <excludes>
                  <exclude>glob:**/javafx.*Empty</exclude>
                </excludes>
                <excludenames>
                  <excludename>javafx\..+Empty</excludename>
                </excludenames>
              </dependencyset>
            </dependencysets>
          </modulepath>
          <!--
            Specifies the modules names (names of root modules) to add to
            the runtime image. Their transitive dependencies will add too.
            This module list, along with the main module (if specified)
            will be passed to jlink as the &dash;-add-module argument.
            If not specified, either just the main module (if module
            is specified), or the default set of modules (if mainjar
            is specified) are used.
          -->
          <addmodules>
            <addmodule>java.base</addmodule>
            <addmodule>org.example.rootmodule</addmodule>
          </addmodules>
          <!--
            Link service provider modules and their dependencies.
            Pass on &dash;-bind-services option to jlink.
            Default value: false.
          -->
          <bindservices>true</bindservices>


          <!-- options for creating the application launcher(s) -->


          <!--
            Specifies the main module (and optionally main class) of
            the application. This module must be located on the module path.
            When this option is specified, the main module will be linked
            in the Java runtime image. Either module or mainjar option
            can be specified but not both.
          -->
          <module>mainModuleName/mainClassName</module>
          <!--
            Specifies the main JAR of the application, specified as a path
            relative to the input path, containing the main class.
            Either module or mainjar option can be specified but not both.
          -->
          <mainjar>mainJar.jar</mainjar>
          <!--
            Specifies the qualified name of the application main class
            to execute. This option can only be used if mainjar is specified.
          -->
          <mainclass>mainClassName</mainclass>
          <!--
            Specifies the command line arguments to pass to the main class
            if no command line arguments are given to the launcher.
          -->
          <arguments>--gui</arguments>
          <!--
            Specifies the options to pass to the Java runtime.
          -->
          <javaoptions>-Dfile.encoding=UTF-8 -Xms256m -Xmx512m</javaoptions>
          <!--
            Specifies options are added to, or used to overwrite, the original
            command line options to build additional alternative launchers.
          -->
          <addlaunchers>
            <addlauncher>
              <name>launcher1</name>
              <file>config/jpackage/launcher1.properties</file>
              <module>mainModule1Name/mainClass1Name</module>
              <mainjar>mainJar1.jar</mainjar>
              <mainclass>mainClass1Name</mainclass>
              <arguments>--arg11 --arg12</arguments>
              <javaoptions>-Xms128m -Xmx1024m</javaoptions>
              <appversion>1.0.1</appversion>
              <icon>config/jpackage/launcher1.ico</icon>
              <winconsole>true</winconsole>
            </addlauncher>
          </addlaunchers>


          <!--
            platform dependent option for creating
            the application launcher
          -->


          <!--
            Enable creating a console launcher for the application, should be
            specified for application which requires console interactions.
            Default value: false
          -->
          <winconsole>false</winconsole>


          <!--
            options for creating the application
            installable package
          -->


          <!--
            Specifies the location of the predefined application image
            that is used to build an installable package.
          -->
          <appimage>${project.build.directory}/jpackage/appimage</appimage>
          <!--
            Specifies the location of a properties file that contains
            list of key, value pairs. The keys "extension", "mime-type",
            "icon", and "description" can be used to describe the association.
          -->
          <fileassociations>
            <fileassociation>config/jpackage/associations1.properties</fileassociation>
            <fileassociation>config/jpackage/associations2.properties</fileassociation>
          </fileassociations>
          <!--
            Specifies the relative sub-path under the default installation
            location of the application for Windows, or absolute path of the
            installation directory of the application for Mac or Linux.
          -->
          <installdir>Akman/My Application</installdir>
          <!--
            Specifies the location of a license file.
          -->
          <licensefile>config/jpackage/LICENSE</licensefile>
          <!--
            Specifies the location of a resources directory that override
            jpackage resources. Icons, template files, and other resources
            of jpackage can be overridden by adding replacement resources
            to this directory.
          -->
          <resourcedir>config/jpackage/resources</resourcedir>


          <!--
            WINDOWS platform dependent options for creating
            the application installable package
          -->


          <!--
            Enable adding a dialog to choose a directory in which
            the product is installed.
            Default value: false
          -->
          <windirchooser>true</windirchooser>
          <!--
            Enable adding the application to the system menu.
            Default value: false
          -->
          <winmenu>true</winmenu>
          <!--
            Start menu group this application is placed in.
          -->
          <winmenugroup>JPackage</winmenugroup>
          <!--
            Enable requesting to perform an install on a per-user basis.
            Default value: false
          -->
          <winperuserinstall>true</winperuserinstall>
          <!--
            Enable creating a desktop shortcut for the application.
            Default value: false
          -->
          <winshortcut>true</winshortcut>
          <!--
            UUID associated with upgrades for this package.
          -->
          <winupgradeuuid>8CF81762-0B19-46A6-875E-1F839A1700D0</winupgradeuuid>


          <!--
            MAC platform dependent options for creating
            the application installable package
          -->
          
          <!--
            An identifier that uniquely identifies the application for macOS.
            Defaults to the main class name. May only use
            alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.) characters.
          -->
          <macpackageidentifier>macPackageIdentifier</macpackageidentifier>
          <!--
            Name of the application as it appears in the Menu Bar.
            This can be different from the application name.
            This name must be less than 16 characters long and be suitable for
            displaying in the menu bar and the application Info window.
            Defaults to the application name.
          -->
          <macpackagename>macPackageName</macpackagename>
          <!--
            When signing the application package, this value is prefixed
            to all components that need to be signed that don't have
            an existing package identifier.
          -->
          <macpackagesigningprefix>macPackageSigningPrefix</macpackagesigningprefix>
          <!--
            Request that the package be signed.
            Default value: false
          -->
          <macsign>false</macsign>
          <!--
            Path of the keychain to search for the signing identity
            (absolute path or relative to the current directory).
            If not specified, the standard keychains are used.
          -->
          <macsigningkeychain>macSigningKeyChain</macsigningkeychain>
          <!--
            Team name portion in Apple signing identities' names.
            For example "Developer ID Application: ".
          -->
          <macsigningkeyusername>macSigningKeyUserName</macsigningkeyusername>


          <!--
            LINUX platform dependent options for creating
            the application installable package
          -->


          <!--
            Name for Linux package, defaults to the application name.
          -->
          <linuxpackagename>linuxPackageName</linuxpackagename>
          <!--
            Maintainer for .deb package (email).
          -->
          <linuxdebmaintainer>linuxDebMaintainer</linuxdebmaintainer>
          <!--
            Menu group this application is placed in.
          -->
          <linuxmenugroup>linuxMenuGroup</linuxmenugroup>
          <!--
            Required packages or capabilities for the application.
            Default value: false
          -->
          <linuxpackagedeps>false</linuxpackagedeps>
          <!--
            Type of the license ("License: <name>" of the RPM .spec).
          -->
          <linuxrpmlicensetype>MIT</linuxrpmlicensetype>
          <!--
            Release value of the RPM <name>.spec file or Debian revision value
            of the DEB control file.
          -->
          <linuxapprelease>linuxAppRelease</linuxapprelease>
          <!--
            Group value of the RPM <name>.spec file or Section value
            of DEB control file.
          -->
          <linuxappcategory>linuxAppCategory</linuxappcategory>
          <!--
            Creates a shortcut for the application.
            Default value: false
          -->
          <linuxshortcut>true</linuxshortcut>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
