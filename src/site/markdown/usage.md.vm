## Velocity treats double hashes as comments, so $H can be used instead
#set( $H = '#' )
# Usage

Add the plugin to your pom:

```xml
  <project>
    ...
    <build>
      <pluginManagement>
        <plugins>
          ...
          <plugin>
            <groupId>${project.groupId}</groupId>
            <artifactId>${project.artifactId}</artifactId>
            <version>${project.version}</version>
          </plugin>
          ...
        </plugins>
      </pluginManagement>
    </build>
    ...
    <plugins>
      ...
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <executions>
          <execution>
            <phase>verify</phase>
            <goals>
              <goal>jpackage</goal>
            </goals>
            <configuration>
              <!-- put your configurations here -->
            </configuration>
          <execution>
        <executions>
      </plugin>
      ...
    </plugins>
    ...
  </project>
```

And then build your project, *jpackage* starts automatically.

```console
mvn clean verify
```

Or you can start the plugin manually.

```console
mvn jpackage:jpackage
```

It will not fork (spawn a parallel) an alternate build lifecycle and
will execute the *jpackage* goal immediately.

If you want to use snapshot versions of the plugin connect the snapshot
repository in your pom.xml.

```xml
  <project>
    ...
    <pluginRepositories>
      <pluginRepository>
        <id>${project.distributionManagement.snapshotRepository.id}</id>
        <name>${project.distributionManagement.snapshotRepository.name}</name>
        <url>${project.distributionManagement.snapshotRepository.url}</url>
        <layout>default</layout>
        <snapshots>
          <enabled>true</enabled>
        </snapshots>
        <releases>
          <enabled>false</enabled>
        </releases>
      </pluginRepository>
    </pluginRepositories>
    ...
  </project>
```
